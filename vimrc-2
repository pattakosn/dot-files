filetype plugin indent on
syntax enable
set nocompatible
set tabstop=8
set softtabstop=8
set shiftwidth=8
set expandtab
set autoindent
set smartindent
set number                " absolute line numbers
set cursorline           " highlight current line
set hlsearch             " highlight search results
set incsearch            " incremental search
set ignorecase           " case-insensitive search
set smartcase            " case-sensitive if uppercase used
set wildmenu             " command completion menu
set laststatus=2         " always show status line
set backspace=indent,eol,start  " better backspace behavior
set rnu

" Set leader key
let mapleader = ","

" if vim plug plugin manager doesn't exist, download it
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()

" collection of language packs tool
Plug 'sheerun/vim-polyglot'

" typing suggestion tool
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Browser
Plug 'preservim/nerdtree'

" help with typing pairs ({}, [], etc)
Plug 'jiangmiao/auto-pairs'

" Custom bottom info bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" integrate cmake
Plug 'cdelledonne/vim-cmake'

" dark theme
Plug 'dracula/vim'

" Git integration
Plug 'tpope/vim-fugitive'
" Better commenting
Plug 'tpope/vim-commentary'

" Fuzzy file finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Better syntax highlighting for C++
Plug 'octol/vim-cpp-enhanced-highlight'

" tagbar
"Plug 'preservim/tagbar'
"Plug 'majutsushi/tagbar'

" taglist
Plug 'vim-scripts/taglist.vim'

" cscope
Plug 'vim-scripts/cscope.vim'

call plug#end()

" use tab to trigger completion and navigate to next complete item
" Tab completion function - must be defined before mappings
function! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction
" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackSpace() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item or notify coc.nvim to format
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

if has('termguicolors')
  set termguicolors
endif
try
  colorscheme dracula
  let g:airline_theme='dracula'
catch /^Vim\%((\a\+)\)\=:E185/
  " Fallback if dracula not available
  colorscheme default
endtry

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTreeToggle<CR>
" Start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" !!!! INSTALL ccls vim with coc !!!
" Use F8 to open tagbar display
"nmap <F8> :TagbarToggle<CR>

" Use F7 to open tagbar display
nmap <F7> :Tlist<CR>
"Show Taglist window on the right side
let Tlist_Use_Right_Window = 1
"Close folds for inactive files
let Tlist_File_Fold_Auto_Close=1
" point taglist to ctags
"let Tlist_Ctags_Cmd='/usr/bin/ctags'

" Use F9 to set build dir to ../build
nmap <F9> :set makeprg=make\ -C\ ../build<CR>

if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

   " Try to load cscope database from current directory
  if filereadable("cscope.out")
    cs add cscope.out
  elseif filereadable("../cscope.out")
    cs add ../cscope.out
  endif

"  cnoreabbrev csa cs add
"  cnoreabbrev csf cs find
"  cnoreabbrev csk cs kill
"  cnoreabbrev csr cs reset
"  cnoreabbrev css cs show
"  cnoreabbrev csh cs help
  cnoreabbrev <expr> csa  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs add'  : 'csa')
  cnoreabbrev <expr> csf  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs find' : 'csf')
  cnoreabbrev <expr> csk  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs kill' : 'csk')
  cnoreabbrev <expr> csr  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs reset' : 'csr')
  cnoreabbrev <expr> css  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs show' : 'css')
  cnoreabbrev <expr> csh  ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs help' : 'csh')

  command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif

"Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
